<?xml version="1.0"?>
<launch>
  <arg name="x"                       default="19" />
  <arg name="y"                       default="3" />
  <arg name="yaw"                     default="-1.57" doc="[0 - right, 1.57 - up]" />
  <arg name="world_name"              default="maze2020v2" />
  <arg name="world_minor_version"     default="3" />

  <arg name="localization"            default="true" doc="[false means SLAM, true means localization]" />
  <arg name="wp_global_planner"       default="true"  doc="[true - wp_global_planner, false - global_planner]"/>
  <arg name="mapping_algorithm"       default="hector_mapping" doc="[hector_mapping, gmapping]"/>
  <arg name="run_solver"              default="true" doc="[bool]" />

  <arg name="render_maze"             default="false" />

  <arg name="gz_gui"                  default="false" />
  <arg name="rviz"                    default="true" />


  <!-- 1. Navigation stack -->
  <group if="$(arg localization)">
    <include file="$(find wr8_software)/launch/localization.launch">
      <arg name="wp_global_planner"   value="$(arg wp_global_planner)" />
      <arg name="map"                 value="$(arg world_name)" />
      <arg name="x"                   value="$(arg x)"/>
      <arg name="y"                   value="$(arg y)"/>
      <arg name="yaw"                 value="$(arg yaw)"/>
    </include>
  </group>
  <group unless="$(arg localization)">
    <include file="$(find wr8_software)/launch/slam.launch">
      <arg name="wp_global_planner"   value="$(arg wp_global_planner)"/>
      <arg name="mapping_algorithm"   value="$(arg mapping_algorithm)"/>
      <arg name="x"                   value="$(arg x)"/>
      <arg name="y"                   value="$(arg y)"/>
      <arg name="yaw"                 value="$(arg yaw)"/>
    </include>
  </group>

  <node pkg="wr8_software" type="cmd_2_vel.py" name="cmd_2_vel" output="screen"/>

  <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher_node" output="screen">
    <param name="use_imu"         value="false"/>
    <param name="use_odom"        value="false"/>
    <param name="use_vel"         value="true"/>
    <param name="max_correspondence_dist" value="0.1"/>
    <!-- <param name="max_angular_correction_deg" value="10"/> -->
    <remap from="vel"            to="cmd_odom_vel"/>
    <param name="publish_tf"      value="true"/>

    <param name="fixed_frame"     value="odom"/>
    <param name="base_frame"      value="base_footprint"/>
    <param name="max_iterations"  value="10"/>
  </node>
<!-- 
  <node pkg="tf" type="static_transform_publisher" name="odom_to_base_footprint"
    args="0.0 0.0 0.0 0.0 0.0 0.0 /odom /base_footprint 40" /> -->


  <!-- 2. Solver -->
  <group if="$(arg run_solver)">
    <node pkg="wr8_software" type="solver.py" name="solver" output="screen">
      <param name="render_maze"         value="$(arg render_maze)"/>
      <param name="mad_detector/model_path"  value="$(find mad_detector)/models/Yolov4Tiny_mad_model.pth"/>
      <rosparam file="$(find wr8_software)/config/solver_config.yaml" command="load"/>
      <rosparam file="$(find wr8_software)/config/$(arg world_name).yaml" command="load"/>
    </node>
    <include file="$(find car_parking)/launch/car_parking.launch"/>
  </group>


  <!-- 3. Visualization using rviz -->
  <group if="$(arg rviz)">
    <group if="$(arg localization)">
      <include file="$(find wr8_software)/launch/rviz_localization_view.launch"/>
    </group>
    <group unless="$(arg localization)">
      <include file="$(find wr8_software)/launch/rviz_slam_view.launch"/>
    </group>
  </group>


  <!-- 4. Gazebo simulation -->
  <include file="$(find wr8_description)/launch/gazebo.launch">
    <arg name="world_name"          value="$(arg world_name).$(arg world_minor_version).world"/>
    <arg name="x"                   value="$(arg x)"/>
    <arg name="y"                   value="$(arg y)"/>
    <arg name="yaw"                 value="$(arg yaw)"/>
    <arg name="gz_gui"              value="$(arg gz_gui)"/>
    <arg name="odom_enabled"        value="false" />
  </include>

  <!-- Publish START! -->
  <node pkg="rostopic" type="rostopic" name="arbitrary_name" args="pub /cmd std_msgs/String START -l" output="screen"/>

  <!-- <node pkg="rqt_tf_tree" type="rqt_tf_tree" name="tf_tree_vis" output="screen"/> -->
</launch>
