obstacle_range: 3.0
raytrace_range: 3.5

footprint: [[-0.205, -0.155], [-0.205, 0.155], [0.077, 0.155], [0.077, -0.155]]
#robot_radius: 0.17



static_layer:
  unknown_cost_value: -1
  lethal_cost_threshold: 100
  first_map_only: false
  subscribe_to_updates: false
  track_unknown_space: false
  use_maximum: true
  trinary_costmap: true
  marking: false
  clearing: true
  
  # enabled: true
  map_topic: /map #Тема, на которую подписывается Costmap для статической карты. Этот параметр полезен, когда у вас есть несколько экземпляров карты затрат в одном узле, и вы хотите использовать разные статические карты

inflation_layer:
  inflation_radius: 2.0 # the bigger the better, defines where the gradient is
  cost_scaling_factor: 1.5 # 0.5 the bigger the steeper the gradient is

# #   # https://github.com/SteveMacenski/spatio_temporal_voxel_layer/issues/129

# depth_obstacle_layer:
#   observation_sources: point_cloud_sensor
#   track_unknown_space: true

#   point_cloud_sensor:
#     data_type: PointCloud2
#     topic: /camera/depth/points
#     marking: true
#     clear: true
#     expected_update_rate: 0
#     min_obstacle_height: 0.6    # default 0, meters
#     max_obstacle_height: 3.0     # default 3, meters

#     observation_persistence: 0.0


depth_obstacle_layer:
  enabled: true
  origin_z: 0.0 
  z_resolution: 0.05
  z_voxels: 10 
  unknown_threshold: 0
  #mark_threshold: 2
  publish_voxel_map: true
  combination_method: 1
  observation_sources: point_cloud_sensor

  point_cloud_sensor:
    data_type: PointCloud2
    topic: /camera/depth/points
    marking: true
    clearing: true
    obstacle_range: 2.90 #Максимальный диапазон в метрах, на котором можно вставлять препятствия в карту затрат с использованием данных датчиков. 
    raytrace_range: 2.00 #Максимальное расстояние в метрах, на котором можно трассировать препятствия на карте с помощью данных датчиков. 
    min_obstacle_height: 0.01
    max_obstacle_height: 0.5
    mark_threshold: 3
    observation_persistence: 2.0

#laser_scan_sensor: {sensor_frame: frame_name, data_type: LaserScan, topic: topic_name, marking: true, clearing: true}

# map_type: costmap
# observation_sources: point_cloud_sensor
# scan: {sensor_frame: base_scan, data_type: LaserScan, topic: scan, marking: true, clearing: true}
  #depth_scan: {sensor_frame: camera_rgb_optical_frame, data_type: LaserScan, topic: /camera/scan, marking: true, clearing: true}

# point_cloud_sensor: {sensor_frame: camera_rgb_optical_frame, data_type: PointCloud2, topic: /camera/depth/points, marking: true, clearing: true}

# rs_st_obstacle_layer:
#   enabled:               true
#   voxel_decay:           5     #seconds if linear, e^n if exponential
#   decay_model:           0      #0=linear, 1=exponential, -1=persistent
#   voxel_size:            0.1   #meters
#   track_unknown_space:   true   #default space is unknown
#   observation_persistence: 0.0  #seconds
#   max_obstacle_height:   2.0    #meters
#   unknown_threshold:     5     #voxel height
#   mark_threshold:        0      #voxel height
#   update_footprint_enabled: true
#   combination_method:    1      #1=max, 0=override
#   obstacle_range:        5    #meters
#   origin_z:              0.0    #meters
#   publish_voxel_map:     true   # default off
#   transform_tolerance:   0.2    # seconds
#   mapping_mode:          false  # default off, saves map not for navigation
#   map_save_duration:     30     #default 60s, how often to autosave
#   observation_sources:   rgbd1_clear rgbd1_mark
  
#   rgbd1_mark:
#     data_type: PointCloud2
#     topic: /camera/depth/points
#     marking: true
#     clearing: false
#     min_obstacle_height: 0.1     #default 0, meters
#     max_obstacle_height: 3    #defaule 3, meters
#     expected_update_rate: 0.0    #default 0, if not updating at this rate at least, remove from buffer
#     observation_persistence: 0.0 #default 0, use all measurements taken during now-value, 0=latest 
#     inf_is_valid: false          #default false, for laser scans
#     clear_after_reading: true    #default false, clear the buffer after the layer gets readings from it
#     filter: "passthrough"              #default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommended to have at one filter on
#     voxel_min_points: 0          #default 0, minimum points per voxel for voxel filter
  
#   rgbd1_clear:
#     enabled: true                #default true, can be toggled on/off with associated service call
#     data_type: PointCloud2
#     topic: /camera/depth/points
#     marking: false
#     clearing: true
#     filters: "passthrough"
#     min_z: 0.1                   #default 0, meters
#     max_z: 7.0                   #default 10, meters
#     vertical_fov_angle: 0.8745      #default 0.7, radians
#     horizontal_fov_angle: 6.2   #default 1.04, radians
#     decay_acceleration: 0.5      #default 0, 1/s^2. If laser scanner MUST be 0
#     model_type: 0                #default 0 (depth camera). Use 1 for 3D Lidar

rs_st_obstacle_layer:
  enabled:                  true
  voxel_decay:              15    # seconds if linear, e^n if exponential
  decay_model:              0     # 0=linear, 1=exponential, -1=persistent
  voxel_size:               0.1  # meters
  track_unknown_space:      true  # default space is known кубики в рвизе которые строит камера
  max_obstacle_height:      1.0   # meters Максимальная высота любого препятствия, которое будет вставлено в карту затрат, в метрах. Этот параметр должен быть установлен немного выше высоты вашего робота. 
  unknown_threshold:        15    # voxel height
  mark_threshold:           0     # voxel height Максимальное количество отмеченных ячеек, разрешенное в столбце, считающемся «свободным». 
  update_footprint_enabled: true
  combination_method:       1     # 1=max, 0=override
  obstacle_range:           3.0   # meters
  origin_z:                 0.0   # meters Начало координат z карты в метрах.
  publish_voxel_map:        true # default off
  transform_tolerance:      0.2   # seconds задержка между преобразованиями между фреймом робота и датчика  
  mapping_mode:             false # default off, saves map not for navigation
  map_save_duration:        60    # default 60s, how often to autosave
  observation_sources:      rgbd1_mark rgbd1_clear
  rgbd1_mark:
    data_type: PointCloud2
    topic: camera/depth/points
    marking: true
    clearing: false
    min_obstacle_height: 0.01     # default 0, meters (min height to scan
    max_obstacle_height: 0.5     # default 3, meters
    expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
    observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
    inf_is_valid: false          # default false, for laser scans
    filter: "voxel"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on второй способ жрет много памяти
    voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
    clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
  rgbd1_clear:
    data_type: PointCloud2
    topic: camera/depth/points
    marking: false
    clearing: true
    max_z: 7.0                  # default 0, meters
    min_z: 0.1                  # default 10, meters
    vertical_fov_angle: 0.8745  # default 0.7, radians
    horizontal_fov_angle: 1.048 # default 1.04, radians
    decay_acceleration: 5.0     # default 0, 1/s^2. If laser scanner MUST be 0
    model_type: 0                # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar


laser_obstacle_layer:
    observation_sources: laser_scan
    track_unknown_space: true
    footprint_clearing_enabled: false
    combination_method: 1  # 0 - overwrite, 1 - max, 99 - nothing

    laser_scan:
        sensor_frame: base_scan
        data_type: LaserScan
        topic: /scan
        marking: true
        clearing: true
        obstacle_range: 10.
        raytrace_range: 12.
        inf_is_valid: true

# map_type: costmap
# observation_sources: scan
# scan: {sensor_frame: base_scan, data_type: LaserScan, topic: scan, marking: true, clearing: true}